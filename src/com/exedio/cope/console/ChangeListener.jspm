<%
/*
 * Copyright (C) 2004-2009  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.console;

import static com.exedio.cope.console.Format.format;

import java.util.List;

import com.exedio.cope.ChangeListener;
import com.exedio.cope.ChangeListenerInfo;
import com.exedio.cope.ChangeListenerDispatcherInfo;

final class ChangeListener_Jspm extends Console_Jspm
{
	final static void writeBody(
			final ChangeListenerCop cop,
			final Out out,
			final ChangeListenerInfo infoBefore,
			final List<ChangeListener> listeners,
			final ChangeListenerInfo infoAfter,
			final ChangeListenerDispatcherInfo dispatcherInfo)
	{
		final int clearedBefore = infoBefore.getCleared();
		final int clearedAfter = infoAfter.getCleared();
		%>
		<table style="float:left;">
			<caption>Listener</caption>
			<tr><th>Size</td><td><%=format(listeners.size())%></td></tr>
			<tr><th>Cleared</td><td><%=format(clearedBefore)%><%
					if(clearedBefore!=clearedAfter)
					{
						%>/<%=format(clearedAfter)%><%
					}
					%></td></tr>
			<tr><th>Removed</td><td><%=format(infoAfter.getRemoved())%></td></tr>
			<tr><th>Failed</td><td><%=format(infoAfter.getFailed())%></td></tr>
		</table>
		<table>
			<caption>Dispatcher</caption><%

		if(dispatcherInfo!=null)
		{
			%>
			<tr><th>Overflow</td><td><%=format(dispatcherInfo.getOverflow())%></td></tr>
			<tr><th>Exception</td><td><%=format(dispatcherInfo.getException())%></td></tr>
			<tr><th>Pending</td><td><%=format(dispatcherInfo.getPending())%></td></tr><%
		}
		else
		{
			%>
			<tr><td class="notavailable"><% Console_Jspm.writeNotConnected(out, cop); %></td></tr><%
		}
		%>
		</table>
		<hr>
		<form action="<%=cop%>" method="POST"><%
		writeButtons(out);
		%>
			<table>
				<caption>Change Listeners</caption><%
			
			if(listeners.isEmpty())
			{
				%>
				<tr><td>There are no change listeners registered.</td></tr><%
			}
			else
			{
				%>
				<tr>
					<th></th>
					<th>#</th>
					<th>getClass</th>
					<th>toString</th>
				</tr><%
				int number = 0;
				for(final ChangeListener listener : listeners)
				{
				%>
				<tr>
					<td><input type="checkbox" name="<%=cop.REMOVE_CHECKBOX%>" value="<%=cop.toID(listener)%>" /></td>
					<td><%=format(number++)%></td>
					<td class="text"><%=listener.getClass().getName()%></td>
					<td class="text"><%
						try
						{
							%><%=listener.toString()%><%
						}
						catch(RuntimeException e)
						{
							out.writeStackTrace(e);
						}
					%></td>
				</tr><%
				}
			}
			%>
			</table><%
		
		if(!listeners.isEmpty())
			writeButtons(out);
		
		%>
		</form><%
	}
	
	private static final void writeButtons(final Out out)
	{
			%>
			<input type="submit" name="<%=ChangeListenerCop.REMOVE_SELECTED%>" value="remove selected" /><%
	}
}%>