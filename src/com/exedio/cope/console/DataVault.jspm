<%
/*
 * Copyright (C) 2004-2009  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.console;

import static com.exedio.cope.console.Format.format;
import static java.util.Collections.singletonList;

import java.util.Collection;
import java.util.List;

import com.exedio.cope.DataField;
import com.exedio.cope.DataFieldVaultInfo;
import com.exedio.cope.Pattern;
import com.exedio.cope.Type;
import com.exedio.cope.console.DataVaultCop.Vault;
import com.exedio.cope.misc.DataFieldVaultSummary;
import com.exedio.cope.pattern.MediaPath;

final class DataVault_Jspm
{
	static void writeBody(
			final Out out,
			final DataVaultCop cop,
			final Collection<Vault> vaults,
			final List<DataFieldVaultInfo> infos,
			final DataFieldVaultSummary summary)
	{
		%>
		<table>
			<caption>Data Vaults</caption>
			<tr>
				<th>Service</th>
				<th>Count</th>
				<th>Max Size</th>
				<th>Fields</th>
			</tr><%

			for(final Vault vault : vaults)
			{
			%>
			<tr>
				<td class="text"><%=vault.service%></td>
				<td><%=format(vault.getCount())%></td>
				<td><%=format(vault.getMaxSize())%></td>
				<td class="text"><small><% write(out, cop, vault.getFields()); %></small></td>
			</tr><%
			}
		%>
		</table>
		<hr>
		<table>
			<caption>Fields</caption>
			<tr>
				<th rowspan="2">Field</th>
				<th colspan="4">Get</th>
				<th colspan="3">Put</th>
			</tr>
			<tr>
				<th>Length</th>
				<th>Bytes</th>
				<th>Stream</th>
				<th colspan="2">Total</th>
				<th>Initial</th>
				<th>Redundant</th>
			</tr>
			<tr>
				<th>Summary</th>
				<td><%=format(summary.getGetLengthCount())%></td>
				<td><%=format(summary.getGetBytesCount())%></td>
				<td><%=format(summary.getGetStreamCount())%></td>
				<td><%=format(summary.getGetCount())%></td>
				<td><%=format(summary.getPutCount())%></td>
				<td><%=format(summary.getPutInitialCount())%></td>
				<td><%=format(summary.getPutRedundantCount())%></td>
			</tr><%

			for(final DataFieldVaultInfo info : infos)
			{
			%>
			<tr>
				<td class="text"><% write(out, cop, singletonList(info.getField())); %></td>
				<td><%=format(info.getGetLengthCount())%></td>
				<td><%=format(info.getGetBytesCount())%></td>
				<td><%=format(info.getGetStreamCount())%></td>
				<td><%=format(info.getGetCount())%></td>
				<td><%=format(info.getPutCount())%></td>
				<td><%=format(info.getPutInitialCount())%></td>
				<td><%=format(info.getPutRedundantCount())%></td>
			</tr><%
			}
		%>
		</table><%
	}

	private static void write(
			final Out out,
			final ConsoleCop<?> cop,
			final List<DataField> fields)
	{
		boolean first = true;
		Type<?> previousType = null;
		for(final DataField field : fields)
		{
			if(first)
				first = false;
			else
				{ %>, <% }

			final Type<?> type = field.getType();
			if(previousType!=type)
			{
				%><%=type.getID()%>.<%
				previousType = type;
			}

			final Pattern pattern = field.getPattern();
			if(pattern instanceof MediaPath)
			{
				%><a href="<%=cop.toMedia((MediaPath)pattern)%>"><%=pattern.getName()%></a><%
			}
			else
			{
				%><%=field.getName()%><%
			}
		}
	}

	private DataVault_Jspm()
	{
		// prevent instantiation
	}
}%>
