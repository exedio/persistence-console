/*
 * Copyright (C) 2004-2009  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.console.example;

import com.exedio.cope.Item;
import com.exedio.cope.StringField;
import com.exedio.cope.pattern.Media;
import com.exedio.cope.pattern.MediaImageMagickThumbnail;
import com.exedio.cope.pattern.MediaRedirect;
import com.exedio.cope.pattern.MediaThumbnail;
import com.exedio.cope.pattern.PreventUrlGuessing;

public final class AMediaItem extends Item
{
	/**
	 * @cope.initial
	 */
	static final StringField name = new StringField().optional();

	static final Media content = new Media().optional();

	static final Media large = new Media().optional().lengthMax(50*1000*1000);
	static final Media small = new Media().optional().lengthMax(     50*1000);

	static final Media stylesheet = new Media().optional().contentType("text/css");

	@PreventUrlGuessing()
	static final Media secret = new Media().optional();

	@Deprecated
	static final MediaRedirect redirect = new MediaRedirect(content);

	static final MediaThumbnail thumbnail = new MediaThumbnail(content, 150, 150);

	@Deprecated
	static final MediaRedirect thumbnailRedirect = new MediaRedirect(thumbnail);

	static final MediaImageMagickThumbnail thumbnailMagick = new MediaImageMagickThumbnail(content, 150, 150);

	static final MediaImageMagickThumbnail thumbnailMagickPng = new MediaImageMagickThumbnail(content, 150, 150).outputContentType("image/png");

	static final MediaImageMagickThumbnail thumbnailMagickPngBlue = new MediaImageMagickThumbnail(content, 150, 150).outputContentType("image/png").flatten("blue");

	static final ANameServer nameServer = new ANameServer(name);


	AMediaItem()
	{
		this((String)null);
	}

	/**

	 **
	 * Creates a new AMediaItem with all the fields initially needed.
	 * @param name the initial value for field {@link #name}.
	 * @throws com.exedio.cope.StringLengthViolationException if name violates its length constraint.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	AMediaItem(
				final java.lang.String name)
			throws
				com.exedio.cope.StringLengthViolationException
	{
		this(new com.exedio.cope.SetValue[]{
			AMediaItem.name.map(name),
		});
	}/**

	 **
	 * Creates a new AMediaItem and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	private AMediaItem(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@SuppressWarnings("unused") private AMediaItem(final com.exedio.cope.ActivationParameters ap)
	{
		super(ap);
	}/**

	 **
	 * Returns the value of {@link #name}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getName()
	{
		return AMediaItem.name.get(this);
	}/**

	 **
	 * Sets a new value for {@link #name}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setName(final java.lang.String name)
			throws
				com.exedio.cope.StringLengthViolationException
	{
		AMediaItem.name.set(this,name);
	}/**

	 **
	 * Returns a URL the content of {@link #content} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getContentURL()
	{
		return AMediaItem.content.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #content} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getContentLocator()
	{
		return AMediaItem.content.getLocator(this);
	}/**

	 **
	 * Returns the content type of the media {@link #content}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getContentType public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getContentContentType()
	{
		return AMediaItem.content.getContentType(this);
	}/**

	 **
	 * Returns whether media {@link #content} is null.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.isNull public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final boolean isContentNull()
	{
		return AMediaItem.content.isNull(this);
	}/**

	 **
	 * Returns the last modification date of media {@link #content}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLastModified public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final long getContentLastModified()
	{
		return AMediaItem.content.getLastModified(this);
	}/**

	 **
	 * Returns the body length of the media {@link #content}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLength public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final long getContentLength()
	{
		return AMediaItem.content.getLength(this);
	}/**

	 **
	 * Returns the body of the media {@link #content}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getContentBody()
	{
		return AMediaItem.content.getBody(this);
	}/**

	 **
	 * Writes the body of media {@link #content} into the given stream.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getContentBody(final java.io.OutputStream body)
			throws
				java.io.IOException
	{
		AMediaItem.content.getBody(this,body);
	}/**

	 **
	 * Writes the body of media {@link #content} into the given file.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getContentBody(final java.io.File body)
			throws
				java.io.IOException
	{
		AMediaItem.content.getBody(this,body);
	}/**

	 **
	 * Sets the content of media {@link #content}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setContent(final com.exedio.cope.pattern.Media.Value content)
			throws
				java.io.IOException
	{
		AMediaItem.content.set(this,content);
	}/**

	 **
	 * Sets the content of media {@link #content}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setContent(final byte[] body,final java.lang.String contentType)
	{
		AMediaItem.content.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #content}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setContent(final java.io.InputStream body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		AMediaItem.content.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #content}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setContent(final java.io.File body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		AMediaItem.content.set(this,body,contentType);
	}/**

	 **
	 * Returns a URL the content of {@link #large} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getLargeURL()
	{
		return AMediaItem.large.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #large} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getLargeLocator()
	{
		return AMediaItem.large.getLocator(this);
	}/**

	 **
	 * Returns the content type of the media {@link #large}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getContentType public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getLargeContentType()
	{
		return AMediaItem.large.getContentType(this);
	}/**

	 **
	 * Returns whether media {@link #large} is null.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.isNull public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final boolean isLargeNull()
	{
		return AMediaItem.large.isNull(this);
	}/**

	 **
	 * Returns the last modification date of media {@link #large}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLastModified public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final long getLargeLastModified()
	{
		return AMediaItem.large.getLastModified(this);
	}/**

	 **
	 * Returns the body length of the media {@link #large}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLength public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final long getLargeLength()
	{
		return AMediaItem.large.getLength(this);
	}/**

	 **
	 * Returns the body of the media {@link #large}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getLargeBody()
	{
		return AMediaItem.large.getBody(this);
	}/**

	 **
	 * Writes the body of media {@link #large} into the given stream.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getLargeBody(final java.io.OutputStream body)
			throws
				java.io.IOException
	{
		AMediaItem.large.getBody(this,body);
	}/**

	 **
	 * Writes the body of media {@link #large} into the given file.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getLargeBody(final java.io.File body)
			throws
				java.io.IOException
	{
		AMediaItem.large.getBody(this,body);
	}/**

	 **
	 * Sets the content of media {@link #large}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setLarge(final com.exedio.cope.pattern.Media.Value large)
			throws
				java.io.IOException
	{
		AMediaItem.large.set(this,large);
	}/**

	 **
	 * Sets the content of media {@link #large}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setLarge(final byte[] body,final java.lang.String contentType)
	{
		AMediaItem.large.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #large}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setLarge(final java.io.InputStream body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		AMediaItem.large.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #large}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setLarge(final java.io.File body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		AMediaItem.large.set(this,body,contentType);
	}/**

	 **
	 * Returns a URL the content of {@link #small} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getSmallURL()
	{
		return AMediaItem.small.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #small} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getSmallLocator()
	{
		return AMediaItem.small.getLocator(this);
	}/**

	 **
	 * Returns the content type of the media {@link #small}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getContentType public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getSmallContentType()
	{
		return AMediaItem.small.getContentType(this);
	}/**

	 **
	 * Returns whether media {@link #small} is null.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.isNull public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final boolean isSmallNull()
	{
		return AMediaItem.small.isNull(this);
	}/**

	 **
	 * Returns the last modification date of media {@link #small}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLastModified public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final long getSmallLastModified()
	{
		return AMediaItem.small.getLastModified(this);
	}/**

	 **
	 * Returns the body length of the media {@link #small}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLength public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final long getSmallLength()
	{
		return AMediaItem.small.getLength(this);
	}/**

	 **
	 * Returns the body of the media {@link #small}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getSmallBody()
	{
		return AMediaItem.small.getBody(this);
	}/**

	 **
	 * Writes the body of media {@link #small} into the given stream.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getSmallBody(final java.io.OutputStream body)
			throws
				java.io.IOException
	{
		AMediaItem.small.getBody(this,body);
	}/**

	 **
	 * Writes the body of media {@link #small} into the given file.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getSmallBody(final java.io.File body)
			throws
				java.io.IOException
	{
		AMediaItem.small.getBody(this,body);
	}/**

	 **
	 * Sets the content of media {@link #small}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setSmall(final com.exedio.cope.pattern.Media.Value small)
			throws
				java.io.IOException
	{
		AMediaItem.small.set(this,small);
	}/**

	 **
	 * Sets the content of media {@link #small}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setSmall(final byte[] body,final java.lang.String contentType)
	{
		AMediaItem.small.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #small}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setSmall(final java.io.InputStream body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		AMediaItem.small.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #small}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setSmall(final java.io.File body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		AMediaItem.small.set(this,body,contentType);
	}/**

	 **
	 * Returns a URL the content of {@link #stylesheet} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getStylesheetURL()
	{
		return AMediaItem.stylesheet.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #stylesheet} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getStylesheetLocator()
	{
		return AMediaItem.stylesheet.getLocator(this);
	}/**

	 **
	 * Returns whether media {@link #stylesheet} is null.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.isNull public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final boolean isStylesheetNull()
	{
		return AMediaItem.stylesheet.isNull(this);
	}/**

	 **
	 * Returns the last modification date of media {@link #stylesheet}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLastModified public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final long getStylesheetLastModified()
	{
		return AMediaItem.stylesheet.getLastModified(this);
	}/**

	 **
	 * Returns the body length of the media {@link #stylesheet}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLength public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final long getStylesheetLength()
	{
		return AMediaItem.stylesheet.getLength(this);
	}/**

	 **
	 * Returns the body of the media {@link #stylesheet}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getStylesheetBody()
	{
		return AMediaItem.stylesheet.getBody(this);
	}/**

	 **
	 * Writes the body of media {@link #stylesheet} into the given stream.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getStylesheetBody(final java.io.OutputStream body)
			throws
				java.io.IOException
	{
		AMediaItem.stylesheet.getBody(this,body);
	}/**

	 **
	 * Writes the body of media {@link #stylesheet} into the given file.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getStylesheetBody(final java.io.File body)
			throws
				java.io.IOException
	{
		AMediaItem.stylesheet.getBody(this,body);
	}/**

	 **
	 * Sets the content of media {@link #stylesheet}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setStylesheet(final com.exedio.cope.pattern.Media.Value stylesheet)
			throws
				java.io.IOException
	{
		AMediaItem.stylesheet.set(this,stylesheet);
	}/**

	 **
	 * Sets the content of media {@link #stylesheet}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setStylesheet(final byte[] body,final java.lang.String contentType)
	{
		AMediaItem.stylesheet.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #stylesheet}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setStylesheet(final java.io.InputStream body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		AMediaItem.stylesheet.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #stylesheet}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setStylesheet(final java.io.File body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		AMediaItem.stylesheet.set(this,body,contentType);
	}/**

	 **
	 * Returns a URL the content of {@link #secret} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getSecretURL()
	{
		return AMediaItem.secret.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #secret} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getSecretLocator()
	{
		return AMediaItem.secret.getLocator(this);
	}/**

	 **
	 * Returns the content type of the media {@link #secret}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getContentType public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getSecretContentType()
	{
		return AMediaItem.secret.getContentType(this);
	}/**

	 **
	 * Returns whether media {@link #secret} is null.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.isNull public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final boolean isSecretNull()
	{
		return AMediaItem.secret.isNull(this);
	}/**

	 **
	 * Returns the last modification date of media {@link #secret}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLastModified public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final long getSecretLastModified()
	{
		return AMediaItem.secret.getLastModified(this);
	}/**

	 **
	 * Returns the body length of the media {@link #secret}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLength public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final long getSecretLength()
	{
		return AMediaItem.secret.getLength(this);
	}/**

	 **
	 * Returns the body of the media {@link #secret}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getSecretBody()
	{
		return AMediaItem.secret.getBody(this);
	}/**

	 **
	 * Writes the body of media {@link #secret} into the given stream.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getSecretBody(final java.io.OutputStream body)
			throws
				java.io.IOException
	{
		AMediaItem.secret.getBody(this,body);
	}/**

	 **
	 * Writes the body of media {@link #secret} into the given file.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getSecretBody(final java.io.File body)
			throws
				java.io.IOException
	{
		AMediaItem.secret.getBody(this,body);
	}/**

	 **
	 * Sets the content of media {@link #secret}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setSecret(final com.exedio.cope.pattern.Media.Value secret)
			throws
				java.io.IOException
	{
		AMediaItem.secret.set(this,secret);
	}/**

	 **
	 * Sets the content of media {@link #secret}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setSecret(final byte[] body,final java.lang.String contentType)
	{
		AMediaItem.secret.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #secret}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setSecret(final java.io.InputStream body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		AMediaItem.secret.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #secret}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setSecret(final java.io.File body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		AMediaItem.secret.set(this,body,contentType);
	}/**

	 **
	 * Returns a URL the content of {@link #thumbnail} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getThumbnailURL()
	{
		return AMediaItem.thumbnail.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #thumbnail} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getThumbnailLocator()
	{
		return AMediaItem.thumbnail.getLocator(this);
	}/**

	 **
	 * Returns the content type of the media {@link #thumbnail}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getContentType public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getThumbnailContentType()
	{
		return AMediaItem.thumbnail.getContentType(this);
	}/**

	 **
	 * Returns a URL the content of {@link #thumbnail} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURLWithFallbackToSource public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getThumbnailURLWithFallbackToSource()
	{
		return AMediaItem.thumbnail.getURLWithFallbackToSource(this);
	}/**

	 **
	 * Returns the body of {@link #thumbnail}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getThumbnail()
			throws
				java.io.IOException
	{
		return AMediaItem.thumbnail.get(this);
	}/**

	 **
	 * Returns a URL the content of {@link #thumbnailMagick} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getThumbnailMagickURL()
	{
		return AMediaItem.thumbnailMagick.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #thumbnailMagick} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getThumbnailMagickLocator()
	{
		return AMediaItem.thumbnailMagick.getLocator(this);
	}/**

	 **
	 * Returns the content type of the media {@link #thumbnailMagick}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getContentType public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getThumbnailMagickContentType()
	{
		return AMediaItem.thumbnailMagick.getContentType(this);
	}/**

	 **
	 * Returns a URL the content of {@link #thumbnailMagick} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURLWithFallbackToSource public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getThumbnailMagickURLWithFallbackToSource()
	{
		return AMediaItem.thumbnailMagick.getURLWithFallbackToSource(this);
	}/**

	 **
	 * Returns the body of {@link #thumbnailMagick}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getThumbnailMagick()
			throws
				java.io.IOException
	{
		return AMediaItem.thumbnailMagick.get(this);
	}/**

	 **
	 * Returns a URL the content of {@link #thumbnailMagickPng} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getThumbnailMagickPngURL()
	{
		return AMediaItem.thumbnailMagickPng.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #thumbnailMagickPng} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getThumbnailMagickPngLocator()
	{
		return AMediaItem.thumbnailMagickPng.getLocator(this);
	}/**

	 **
	 * Returns the content type of the media {@link #thumbnailMagickPng}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getContentType public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getThumbnailMagickPngContentType()
	{
		return AMediaItem.thumbnailMagickPng.getContentType(this);
	}/**

	 **
	 * Returns a URL the content of {@link #thumbnailMagickPng} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURLWithFallbackToSource public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getThumbnailMagickPngURLWithFallbackToSource()
	{
		return AMediaItem.thumbnailMagickPng.getURLWithFallbackToSource(this);
	}/**

	 **
	 * Returns the body of {@link #thumbnailMagickPng}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getThumbnailMagickPng()
			throws
				java.io.IOException
	{
		return AMediaItem.thumbnailMagickPng.get(this);
	}/**

	 **
	 * Returns a URL the content of {@link #thumbnailMagickPngBlue} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getThumbnailMagickPngBlueURL()
	{
		return AMediaItem.thumbnailMagickPngBlue.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #thumbnailMagickPngBlue} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getThumbnailMagickPngBlueLocator()
	{
		return AMediaItem.thumbnailMagickPngBlue.getLocator(this);
	}/**

	 **
	 * Returns the content type of the media {@link #thumbnailMagickPngBlue}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getContentType public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getThumbnailMagickPngBlueContentType()
	{
		return AMediaItem.thumbnailMagickPngBlue.getContentType(this);
	}/**

	 **
	 * Returns a URL the content of {@link #thumbnailMagickPngBlue} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURLWithFallbackToSource public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getThumbnailMagickPngBlueURLWithFallbackToSource()
	{
		return AMediaItem.thumbnailMagickPngBlue.getURLWithFallbackToSource(this);
	}/**

	 **
	 * Returns the body of {@link #thumbnailMagickPngBlue}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getThumbnailMagickPngBlue()
			throws
				java.io.IOException
	{
		return AMediaItem.thumbnailMagickPngBlue.get(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for aMediaItem.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	public static final com.exedio.cope.Type<AMediaItem> TYPE = com.exedio.cope.TypesBound.newType(AMediaItem.class)
;}
