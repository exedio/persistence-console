<%
/*
 * Copyright (C) 2004-2009  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.console;

import static com.exedio.cope.console.ConsoleCop.writePager;
import static com.exedio.cope.console.Format.format;
import static com.exedio.cope.console.TransactionCop.CLEAR;
import static com.exedio.cope.console.TransactionCop.DISABLE;
import static com.exedio.cope.console.TransactionCop.ENABLE;

import java.time.Duration;
import java.util.Date;
import java.util.List;

import com.exedio.cope.ChangeEvent;
import com.exedio.cope.ChangeEvent.NotAvailableException;
import com.exedio.cope.Transaction;
import com.exedio.cope.TransactionCounters;

final class Transaction_Jspm
{
	static void writeHead(final Out out)
	{
	%>
		<style>
			input
			{
				font-size:7pt;
			}
		</style><%
	}

	@SuppressWarnings("StaticMethodOnlyUsedInOneClass")
	static void writeStats(
			final Out out,
			final long nextId,
			final Date lastStartDate)
	{
		%>
		<table style="float:left;">
			<caption>Statistics</caption>
			<tr><th>Next ID</th><td><%=format(nextId)%></td></tr>
			<tr><th>Last Start Date</th><td><%=lastStartDate%></td></tr>
		</table>
		<%
	}

	@SuppressWarnings("StaticMethodOnlyUsedInOneClass")
	static void writeCounters(
			final Out out,
			final TransactionCounters transactionCounters)
	{
		%>
		<table>
			<caption>Counters</caption>
			<tr>
				<td rowspan="2"></td>
				<th rowspan="2">All</th>
				<th colspan="3">Connection</th>
			</tr>
			<tr>
				<th>Without</th>
				<th>With</th>
				<th>log<sub>10</sub>Ratio</th>
			</tr>
			<tr>
				<th>Commit</th>
				<td><%=format(transactionCounters.getCommit())%></td>
				<td><%=format(transactionCounters.getCommitWithoutConnection())%></td>
				<td><%=format(transactionCounters.getCommitWithConnection())%></td>
				<td><% out.writeRatio(transactionCounters.getCommitWithoutConnection(), transactionCounters.getCommitWithConnection()); %></td>
			</tr>
			<tr>
				<th>Rollback</th>
				<td><%=format(transactionCounters.getRollback())%></td>
				<td><%=format(transactionCounters.getRollbackWithoutConnection())%></td>
				<td><%=format(transactionCounters.getRollbackWithConnection())%></td>
				<td><% out.writeRatio(transactionCounters.getRollbackWithoutConnection(), transactionCounters.getRollbackWithConnection()); %></td>
			</tr>
		</table>
		<%
	}

	static void writeOpen(
			final Out out,
			final Transaction[] openTransactions,
			final Thread[] threads,
			final long[] threadIds,
			final String[] threadNames,
			final int[] threadPriorities,
			final Thread.State[] threadStates,
			final StackTraceElement[][] stacktraces)
	{
		assert openTransactions.length==threads.length;
		assert openTransactions.length==threadIds.length;
		assert openTransactions.length==threadNames.length;
		assert openTransactions.length==threadPriorities.length;
		assert openTransactions.length==threadStates.length;
		assert openTransactions.length==stacktraces.length;
		%>
		<hr>
		<table>
			<caption>Open</caption><%

		if(openTransactions.length==0)
		{
			%>
			<tr><td class="text">There are no transactions currently running.</td></tr><%
		}
		else
		{
			%>
			<tr>
				<th colspan="6">Transaction</th>
				<th colspan="5">Bound Thread</th>
			</tr>
			<tr>
				<th>#</th>
				<th>ID</th>
				<th>Started</th>
				<th title="Transaction.getInvalidationSize()">Inv</th>
				<th title="Number of Pre/Post Commit Hooks (.Duplicates)">Hks</th>
				<th>Name</th>
				<th>ID</th>
				<th>Name</th>
				<th>Prio</th>
				<th>State</th>
				<th>Stacktrace</th>
			</tr><%

			for(int n = 0; n<openTransactions.length; n++)
			{
				final Transaction t = openTransactions[n];
				final Thread thread = threads[n];
				final int inv = t.getInvalidationSize();
				final String name = t.getName();
			%>
			<tr>
				<td><%=format(n)%></td>
				<td><%=format(t.getID())%></td>
				<td><%=t.getStartDate()%></td>
				<td><% if(inv!=0){%><%=format(inv)%><%} %></td>
				<td><%
				{
					final int pre    = t.getPreCommitHookCount();
					final int preDup = t.getPreCommitHookDuplicates();
					final int post    = t.getPostCommitHookCount();
					final int postDup = t.getPostCommitHookDuplicates();
					if( pre!=0 || preDup!=0 || post!=0 || postDup!=0 )
					{
						writeNumberAndDuplicates(out, pre, preDup);
						%>/<%
						writeNumberAndDuplicates(out, post, postDup);
					}
				}
				%></td>
				<td class="<% if(name!=null){%>text<%}else{%>notavailable<%} %>"><%=name%></td>
				<%
				if(thread!=null)
				{
				%><td><%=format(threadIds[n])%></td>
				<td class="text"><%=threadNames[n]%></td>
				<td><%=threadPriorities[n]%></td>
				<td class="text"><%=threadStates[n]%></td>
				<td class="text"><% StackTrace_Jspm.write(out, stacktraces[n]);
				}
				else
				{
					%><td class="text" colspan="5">none<%
				}
				%></td>
			</tr><%
			}
		}
		%>
		</table>
		<%
	}

	private static void writeNumberAndDuplicates(
			final Out out,
			final int number,
			final int duplicates)
	{
		%><%=format(number)%><%
		if(duplicates!=0)
		{
			%><small>,<%=format(duplicates)%></small><%
		}
	}

	static void writeRecorded(
			final Out out,
			final TransactionCop cop,
			final boolean recordCommits,
			final List<ChangeEvent> events)
	{
		%>
		<hr><%
		writeRecordingForm(out, cop, recordCommits);
		%>
		<table><%
				writePager(out, cop);
			%>
			<caption>Changes</caption>
			<tr>
				<th rowspan="2">Node</th>
				<th colspan="4">Transaction</th>
				<th rowspan="2">Items</th>
			</tr>
			<tr>
				<th>ID</th>
				<th>Started</th>
				<th>Duration</th>
				<th>Name</th>
			</tr><%

			for(final ChangeEvent event : events)
			{
			%>
			<tr>
				<td class="text"><%=event.getNodeID()%></td><%

			try
			{
				final long value = event.getTransactionID();
				%>
				<td><%=format(value)%></td><%
			}
			catch(final NotAvailableException e) { write(out, e); }

			try
			{
				final Date value = event.getTransactionStartDate();
				%>
				<td><%=value%></td><%
			}
			catch(final NotAvailableException e) { write(out, e); }

			try
			{
				final Duration value = event.getTransactionDuration();
				%>
				<td><%=value%></td><%
			}
			catch(final NotAvailableException e) { write(out, e); }

			try
			{
				final String value = event.getTransactionName();
				%>
				<td class="<% if(value==null){%>notavailable<%}else{%>text<%} %>"><%=value%></td><%
			}
			catch(final NotAvailableException e) { write(out, e); }


				%>
				<td class="text"><%Commit.writeItems(event, out);%></td>
			</tr><%
			}
		%>
		</table><%

		if(!events.isEmpty())
			writeRecordingForm(out, cop, recordCommits);
	}

	private static void writeRecordingForm(
					final Out out,
					final TransactionCop cop,
					final boolean recordCommits)
	{
		%>
		<form action="<%=cop%>" method="POST">
			recording: <% if(recordCommits){%>enabled<%}else{%>disabled<%}%>
			<input type="submit" name="<%=ENABLE%>"  value="enable" />
			<input type="submit" name="<%=DISABLE%>" value="disable" />
			<input type="submit" name="<%=CLEAR%>"   value="clear" />
		</form><%
	}

	private static void write(final Out out, final NotAvailableException e)
	{
				%>
				<td class="notavailable"><%=e.getMessage()%></td><%
	}

	private Transaction_Jspm()
	{
		// prevent instantiation
	}
}%>
