export function get<RES>(url: string): Promise<RES> {
  // @ts-ignore generated by Console.jspm
  return fetch(apiPath + url).then((r) => parse(r, url));
}

export function post<REQ, RES>(url: string, body: REQ): Promise<RES> {
  // @ts-ignore generated by Console.jspm
  return fetch(apiPath + url, {
    method: "POST",
    headers: [[contentTypeName, contentTypeValue]],
    body: JSON.stringify(body),
  }).then((r) => parse(r, url));
}

function parse(response: Response, url: string): Promise<unknown> {
  const contentType = response.headers.get(contentTypeName);
  if (response.ok) {
    if (contentTypeValue === contentType) return response.json();
    else
      return Promise.reject(
        new Error(
          url +
            ": content type " +
            contentTypeValue +
            " expected, but got " +
            contentType,
        ),
      );
  } else {
    if ("text/plain;charset=UTF-8" === contentType)
      return response
        .text()
        .then((v) =>
          Promise.reject(
            new Error(url + ": response code " + response.status + " " + v),
          ),
        );
    else
      return Promise.reject(
        new Error(
          url +
            ": response code " +
            response.status +
            ", content type text/plain;charset=UTF-8 expected, but got " +
            contentType,
        ),
      );
  }
}

const contentTypeName: string = "Content-Type";
const contentTypeValue: string = "application/json;charset=UTF-8";
