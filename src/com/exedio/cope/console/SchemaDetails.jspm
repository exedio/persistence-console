<%
/*
 * Copyright (C) 2004-2009  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.console;

import static com.exedio.cops.Cop.isPost;

import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;

import com.exedio.cope.Model;
import com.exedio.cops.Resource;
import com.exedio.dsmf.Column;
import com.exedio.dsmf.Constraint;
import com.exedio.dsmf.Node;
import com.exedio.dsmf.Schema;
import com.exedio.dsmf.Sequence;
import com.exedio.dsmf.Table;

final class SchemaDetails_Jspm extends Console_Jspm
{
	private static final String APPLY = "details.apply";
	private static final String APPLY_DRY = "details.dry";

	static final void writeBody(
			final SchemaCop cop,
			final Out out)
	{
		final HttpServletRequest request = out.request;
		final Model model = out.model;
		final boolean detailed = cop.detailed;

		%>
		<hr>
		<h4>Details</h4>
		<% writeToggle(out, cop.toToggleDetailed(), cop.detailed); %> detailed
		<form action="<%=cop%>#overall" method="POST"><%

			if(isPost(request))
			{
				if(request.getParameter(APPLY)!=null || request.getParameter(APPLY_DRY)!=null)
				{
					%><hr>
			<a href="<%=cop%>">flush log</a>
			<ol><%
				cop.writeApply(out, request, model, request.getParameter(APPLY_DRY)!=null);
			%>
			</ol>
			<a href="<%=cop%>">flush log</a>
			<hr><%
				}
			}

			final Schema schema = cop.getVerifiedSchema(model);
			%>
			<div class="schemaApply">
				<input type="submit" name="<%= APPLY     %>" value="apply"/>
				<input type="submit" name="<%= APPLY_DRY %>" value="dry run"/>
			</div>
			<img class="node" onClick="togSch(this)" src="<%=node(schema.getCumulativeColor())%>">
			Schema
			<ul id="schBdy" class="expand"><%

			int tableCount = 0;
			final ArrayList<Column> catchColumns = new ArrayList<>();
			for(final Table table : schema.getTables())
			{
				tableCount++;
				if( !detailed && (table.getCumulativeColor()==Node.Color.OK) )
					continue;

				final String tableName = table.getName();
				%>
				<li>
					<img class="node" onClick="togTab(this,<%=tableCount%>)" src="<%=node(table.getCumulativeColor())%>">
					<small>tab<%=tableCount%></small><%

					if(table.exists())
					{
					%>
					<span class="textedit" onClick="tabName(this)"><%=tableName%></span><%
					}
					else
					{
					%>
					<%=tableName%><%
					}

					final String tableError = table.getError();
					if(tableError!=null)
					{
					%>
					<% write(table.getParticularColor(), out); %> <%=tableError%><%
					}
					if(!table.exists() && table.required())
					{
					%>,
					<input type="checkbox" name="<%=SchemaCop.CREATE_TABLE%>" value="<%=tableName%>"/>create<%
					}

					%>
					<ul id="tabBdy<%=tableCount%>" class="expand"><%

					int columnCount = 0;
					for(final Column column : table.getColumns())
					{
						columnCount++;
						final String columnName = column.getName();
						if("catch".equals(columnName))
							catchColumns.add(column);

						if( !detailed && (column.getCumulativeColor()==Node.Color.OK) )
							continue;
						%>
						<li>
							<div class="nodeLeaf <%=column.getCumulativeColor()%>"></div>
							<small>col<%=columnCount%></small><%

							if(column.exists())
							{
							%>
							<span class="textedit" onClick="colName(this,'<%=tableName%>')"><%=columnName%></span>
							<span class="textedit" onClick="colType(this,'<%=tableName%>','<%=columnName%>')"><%=column.getType()%></span><%
							}
							else
							{
							%>
							<%=columnName%>
							<%=column.getType()%><%
							}

							final String error = column.getError();
							if(error!=null)
							{
							%>
							<% write(column.getParticularColor(), out); %> <%=error%></span><%
							}
							if(!column.exists() && column.required() &&
									column.getTable().exists() )
							{
							%>,
							<input type="checkbox" name="<%=SchemaCop.CREATE_COLUMN%>" value="<%=tableName%>#<%=columnName%>"/>create<%
							}
						%>
						</li><%
					}

					int constraintCount = 0;
					for(final Constraint constraint : table.getConstraints())
					{
						constraintCount++;
						if( !detailed && (constraint.getCumulativeColor()==Node.Color.OK) )
							continue;

						final String constraintName = constraint.getName();
						%>
						<li>
							<div class="nodeLeaf <%=constraint.getCumulativeColor()%>"></div>
							<small><%=constraint.getType()%><%=constraintCount%></small><%

							if(constraint.exists())
							{
							%>
							<span class="textedit" onClick="conName(this,'<%=tableName%>')"><%=constraintName%></span><%
							}
							else
							{
							%>
							<%=constraintName%><%
							}

							final String constraintCondition = constraint.getRequiredCondition();
							if(constraintCondition!=null)
							{
							%>
							<small><%=constraintCondition%></small><%
							}

							final String constraintError = constraint.getError();
							if(constraintError!=null)
							{
							%>
							<% write(constraint.getParticularColor(), out); %> <%=constraintError%><%
							}
							if(!constraint.exists() &&
									constraint.required() &&
									constraint.isSupported() &&
									constraint.getTable().exists() )
							{
							%>
							<input type="checkbox" name="<%=SchemaCop.CREATE_CONSTRAINT%>" value="<%=tableName%>#<%=constraintName%>"/>create<%
							}
						%>
						</li><%
					}
					%>
					</ul>
				</li><%
			}
			int sequenceCount = 0;
			for(final Sequence sequence : schema.getSequences())
			{
				sequenceCount++;
				if( !detailed && (sequence.getCumulativeColor()==Node.Color.OK) )
					continue;

				final String sequenceName = sequence.getName();
				%>
				<li>
					<div class="nodeLeaf <%=sequence.getCumulativeColor()%>"></div>
					<small>seq<%=sequenceCount%></small>
					<%
					if(sequence.exists())
					{
						%><span class="textedit" onClick="seqName(this)"><%=sequenceName%></span><%
					}
					else
					{
						%><%=sequenceName%><%
					}

					%> (<%=sequence.getStartL()%>,<%=sequence.getType()%>)<%

					final String sequenceError = sequence.getError();
					if(sequenceError!=null)
					{
					%>
					<% write(sequence.getParticularColor(), out); %> <%=sequenceError%><%
					}
					if(!sequence.exists() && sequence.required())
					{
					%>,
					<input type="checkbox" name="<%=SchemaCop.CREATE_SEQUENCE%>" value="<%=sequenceName%>"/>create<%
					}
				%>
				</li><%
			}
				%>
				<li>
					Columns:
					<input type="checkbox" name="<%= SchemaCop.COLUMNS_CREATE_MISSING %>" value="true"/>create missing
					<input type="checkbox" name="<%= SchemaCop.COLUMNS_DROP_UNUSED    %>" value="true"/>drop unused
					<input type="checkbox" name="<%= SchemaCop.COLUMNS_MODIFY_MISMATCHING_TYPE %>" value="true"/>modify mismatching type
				</li><%

			if(!catchColumns.isEmpty())
			{
				%>
				<li>
					Catch:
					<input type="checkbox" name="<%= SchemaCop.CATCH_CREATE %>" value="true"/>create
					<input type="checkbox" name="<%= SchemaCop.CATCH_DROP   %>" value="true"/>drop
					<input type="checkbox" name="<%= SchemaCop.CATCH_RESET  %>" value="true"/>reset
				</li><%
			}
			%>
			</ul>
		</form><%
	}

	private static final Resource node(final Node.Color color)
	{
		switch(color)
		{
			case OK:      return ConsoleServlet.nodeFalse;
			case WARNING: return ConsoleServlet.nodeWarningFalse;
			case ERROR:   return ConsoleServlet.nodeErrorFalse;
			default:
				throw new RuntimeException(color.toString());
		}
	}

	private static final void write(final Node.Color color, final Out out)
	{
		switch(color)
		{
			case OK:
				break;
			case WARNING:
				%><img class="icon" src="<%=ConsoleServlet.warning%>"><%
				break;
			case ERROR:
				%><img class="icon" src="<%=ConsoleServlet.error%>"><%
				break;
			default:
				throw new RuntimeException(color.toString());
		}
	}
}
%>