/*
 * Copyright (C) 2004-2009  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.console.example;

import com.exedio.cope.Item;
import com.exedio.cope.SetValue;
import com.exedio.cope.Type;
import com.exedio.cope.instrument.Visibility;
import com.exedio.cope.instrument.WrapperInitial;
import com.exedio.cope.instrument.WrapperType;
import com.exedio.cope.reflect.TypeField;

@WrapperType(constructor=Visibility.NONE)
@SuppressWarnings("StaticMethodOnlyUsedInOneClass") // OK: for example TYPE
final class TypeItem extends Item
{
	@WrapperInitial
	static final TypeField<Item> item = TypeField.create().optional();
	@WrapperInitial
	static final TypeField<AnItem> anitem = TypeField.create(AnItem.class).optional();

	TypeItem(
			final String item,
			final String anitem)
		throws
			com.exedio.cope.StringLengthViolationException
	{
		this(
				SetValue.map(TypeItem.item.getIdField(), item),
				SetValue.map(TypeItem.anitem.getIdField(), anitem));
	}

	// TODO should be generated by instrumentor once bug has been fixed
	TypeItem(
				final Type<?> item,
				final Type<? extends AnItem> anitem)
			throws
				com.exedio.cope.StringLengthViolationException
	{
		this(
			SetValue.map(TypeItem.item, item),
			SetValue.map(TypeItem.anitem, anitem)
		);
	}

	/**
	 * Creates a new TypeItem and sets the given fields initially.
	 */
	@com.exedio.cope.instrument.Generated // customize with @WrapperType(genericConstructor=...)
	private TypeItem(final com.exedio.cope.SetValue<?>... setValues){super(setValues);}

	/**
	 * Returns the value of {@link #item}.
	 */
	@com.exedio.cope.instrument.Generated // customize with @Wrapper(wrap="get")
	@java.lang.SuppressWarnings({"FinalMethodInFinalClass","RedundantSuppression","UnnecessarilyQualifiedStaticUsage"})
	@javax.annotation.Nullable
	final com.exedio.cope.Type<? extends Item> getItem()
	{
		return TypeItem.item.get(this);
	}

	/**
	 * Sets a new value for {@link #item}.
	 */
	@com.exedio.cope.instrument.Generated // customize with @Wrapper(wrap="set")
	@java.lang.SuppressWarnings({"FinalMethodInFinalClass","RedundantSuppression","UnnecessarilyQualifiedStaticUsage"})
	final void setItem(@javax.annotation.Nullable final com.exedio.cope.Type<? extends Item> item)
			throws
				com.exedio.cope.StringLengthViolationException
	{
		TypeItem.item.set(this,item);
	}

	/**
	 * Returns the value of {@link #anitem}.
	 */
	@com.exedio.cope.instrument.Generated // customize with @Wrapper(wrap="get")
	@java.lang.SuppressWarnings({"FinalMethodInFinalClass","RedundantSuppression","UnnecessarilyQualifiedStaticUsage"})
	@javax.annotation.Nullable
	final com.exedio.cope.Type<? extends AnItem> getAnitem()
	{
		return TypeItem.anitem.get(this);
	}

	/**
	 * Sets a new value for {@link #anitem}.
	 */
	@com.exedio.cope.instrument.Generated // customize with @Wrapper(wrap="set")
	@java.lang.SuppressWarnings({"FinalMethodInFinalClass","RedundantSuppression","UnnecessarilyQualifiedStaticUsage"})
	final void setAnitem(@javax.annotation.Nullable final com.exedio.cope.Type<? extends AnItem> anitem)
			throws
				com.exedio.cope.StringLengthViolationException
	{
		TypeItem.anitem.set(this,anitem);
	}

	@com.exedio.cope.instrument.Generated
	@java.io.Serial
	private static final long serialVersionUID = 1l;

	/**
	 * The persistent type information for typeItem.
	 */
	@com.exedio.cope.instrument.Generated // customize with @WrapperType(type=...)
	static final com.exedio.cope.Type<TypeItem> TYPE = com.exedio.cope.TypesBound.newType(TypeItem.class,TypeItem::new);

	/**
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 */
	@com.exedio.cope.instrument.Generated
	private TypeItem(final com.exedio.cope.ActivationParameters ap){super(ap);}
}
