/*
 * Copyright (C) 2004-2009  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.console;

import static com.exedio.cope.console.Format.format;

import com.exedio.cope.Feature;
import com.exedio.cope.IntegerField;
import com.exedio.cope.SequenceInfo;
import com.exedio.cope.This;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

final class SequenceCop extends TestCop<SequenceInfo>
{
	static final String TAB = "sequence";

	SequenceCop(final Args args, final TestArgs testArgs)
	{
		super(TAB, "Sequences", args, testArgs);
	}

	@Override
	protected SequenceCop newArgs(final Args args)
	{
		return new SequenceCop(args, testArgs);
	}

	@Override
	protected SequenceCop newTestArgs(final TestArgs testArgs)
	{
		return new SequenceCop(args, testArgs);
	}

	@Override
	String[] getHeadingHelp()
	{
		return new String[]
		{
			"Checks whether sequence generators are behind database columns they are meant to fill. " +
				"A test result of N with N greater zero means that " +
				"the last number generated by the generator (\"Last\") " +
				"is by N smaller than the maximum of the column (\"Type\".\"Name\").",
			"IMPACT: " +
				"If there is any failure here, " +
				"you will run into unique violations " +
				"if the column is unique " +
				"(primary keys (\"this\") always are)."
		};
	}

	@Override
	boolean requiresConnect()
	{
		return true;
	}

	@Override
	List<SequenceInfo> getItems()
	{
		final LinkedList<SequenceInfo> result = new LinkedList<>(app.model.getSequenceInfo());
		for(final Iterator<SequenceInfo> i = result.iterator(); i.hasNext(); )
		{
			final Feature feature = i.next().getFeature();
			if(! (
					feature instanceof This ||
					feature instanceof IntegerField))
				i.remove();
		}
		return result;
	}

	@Override
	List<Column<SequenceInfo>> columns()
	{
		return COLUMNS;
	}

	private static final List<Column<SequenceInfo>> COLUMNS = List.of(
			column("Type", info -> info.getFeature().getType().getID()),
			column("Name", info -> info.getFeature().getName()),
			columnNonFilterable("Start", info -> format(info.getStartL())),
			columnNonFilterable("Min",   info -> format(info.getMinimumL())),
			columnNonFilterable("Max",   info -> format(info.getMaximumL())),
			columnNonFilterable("Count", info -> format(info.getCountL())),
			columnNonFilterable("First", (out, info) -> { if(info.isKnown()) out.write(format(info.getFirstL())); }),
			columnNonFilterable("Last",  (out, info) -> { if(info.isKnown()) out.write(format(info.getLastL()));  })
	);

	@Override
	String getID(final SequenceInfo info)
	{
		return info.getFeature().getID();
	}

	@Override
	SequenceInfo forID(final String id)
	{
		final Feature feature = app.model.getFeature(id);
		if(feature instanceof This)
			return feature.getType().getPrimaryKeyInfo();
		else if(feature instanceof IntegerField)
			return ((IntegerField)feature).getDefaultToNextInfoX();
		else
			throw new RuntimeException(feature.toString());
	}

	@Override
	long check(final SequenceInfo info)
	{
		final Feature feature = info.getFeature();
		if(feature instanceof This)
			return feature.getType().checkSequenceBehindPrimaryKey().isBehindByL();
		else if(feature instanceof IntegerField)
			return ((IntegerField)feature).checkSequenceBehindDefaultToNextX().isBehindByL();
		else
			throw new RuntimeException(feature.toString());
	}
}
