<%
/*
 * Copyright (C) 2004-2009  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.console;

import static com.exedio.cope.console.Console_Jspm.writeError;
import static com.exedio.cope.console.Console_Jspm.writeUnknown;
import static com.exedio.cope.console.Format.format;

import java.util.List;

import com.exedio.cope.console.TestCop.Info;
import com.exedio.cope.console.TestCop.Store;

final class Test_Jspm
{
	static void writeHead(final Out out)
	{
		%>
		<script>
			/*
				This is the JavaScript file for the AJAX Suggest Tutorial

				You may use this code in your own projects as long as this
				copyright is left	in place.  All code is provided AS-IS.
				This code is distributed in the hope that it will be useful,
				but WITHOUT ANY WARRANTY; without even the implied warranty of
				MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

				For the rest of the code visit http://www.DynamicAJAX.com

				Copyright 2006 Ryan Smith / 345 Technical / 345 Group.

			*/
			//Gets the browser specific XmlHttpRequest Object
			function getXmlHttpRequestObject() {
				if (window.XMLHttpRequest) {
					return new XMLHttpRequest();
				} else if(window.ActiveXObject) {
					return new ActiveXObject("Microsoft.XMLHTTP");
				} else {
					//alert("Ihr Browser ist schon etwas aelter.\nEventuell sollten Sie einmal ueber ein Update nachdenken...");
				}
			}

			var testRequest = getXmlHttpRequestObject();

			function doTest(url,anchor)
			{
				//alert('toTest >' + url + '<');
				if(testRequest && (testRequest.readyState == 4 || testRequest.readyState == 0))
				{
					anchor.style.display = "none";
					testRequest.open("POST", url, true);
					testRequest.onreadystatechange = handleTest;
					testRequest.send(null);
					return false;
				}
				else
				{
					return true;
				}
			}

			function doTest(url)
			{
				//alert('toTest >' + url + '<');
				if(testRequest && (testRequest.readyState == 4 || testRequest.readyState == 0))
				{
					testRequest.open("POST", url, true);
					testRequest.onreadystatechange = handleTest;
					testRequest.send(null);
					return false;
				}
				else
				{
					return true;
				}
			}

			function handleTest()
			{
				if(testRequest.readyState == 4)
				{
					try
					{
						if(testRequest.status != null && testRequest.status == 200)
						{
							var responseXML = testRequest.responseXML;

							var responseNode = responseXML.childNodes[0];
							if(responseNode==null || responseNode.nodeName!="response")
							{
								alert("Communication failed - responseNode node not found:" + testRequest.responseText);
								stopAll = true;
								return;
							}

							for(var i=0; i<responseNode.childNodes.length; i++)
							{
								var updateNode = responseNode.childNodes[i];
								if(updateNode.nodeType==1)
								{
									if(updateNode==null || updateNode.nodeName!="update")
									{
										alert("Communication failed - update node not found:" + testRequest.responseText);
										stopAll = true;
										return;
									}
									var id = updateNode.getAttribute("id");
									var row = document.getElementById(id);
									var className = updateNode.getAttribute("className");
									var content = updateNode.childNodes[0].nodeValue;
									row.className = className;
									row.innerHTML = content;
								}
							}

							var iterateURL = responseNode.getAttribute("iterate");
							if(iterateURL!=null)
								doTest(iterateURL);
						}
					}
					catch(e)
					{
						alert(e);
						stopAll = true;
						throw e;
					}
				}
			}

			function toggleSuccess(image)
			{
				var imageSrc = image.src;
				if(imageSrc.substring(imageSrc.length-8)=="true.png")
				{
					image.src = imageSrc.substring(0, imageSrc.length-8) + "false.png";
					var rows = document.body.getElementsByTagName("tr");
					for(i=0; i<rows.length; i++)
					{
						var row = rows[i];
						if(row.className=="<%=TestCop.SUCCESS_CLASS%>")
							row.style.display = "table-row";
					}
				}
				else
				{
					image.src = imageSrc.substring(0, imageSrc.length-9) + "true.png";
					var rows = document.body.getElementsByTagName("tr");
					for(i=0; i<rows.length; i++)
					{
						var row = rows[i];
						if(row.className=="<%=TestCop.SUCCESS_CLASS%>")
							row.style.display = "none";
					}
				}
			}
		</script><%
	}

	static <I> void writeBody(
			final TestCop<I> cop,
			final Out out,
			final String[] headings,
			final List<I> items,
			final Store store)
	{
		if(items.isEmpty())
		{
			%>
			<table>
				<tr>
					<td class="text">
						There are no <%=cop.name%> in this model.
					</td>
				</td>
			</table><%
			return;
		}

		final int headingsLength = headings.length;

		%>
		<table id="test_table">
			<tr id="summary"><%
				cop.writeSummary(out, headingsLength, items, store);
			%>
				<img class="check" onClick="toggleSuccess(this)" src="<%=ConsoleServlet.checkFalse%>"> hide success
			</tr>
			<tr><%

				for(final String heading : headings)
				{
				%>
				<th><%=heading%></th><%
				}
				%>
				<th></th>
				<th>Date</th>
				<th>Failures</th>
				<th>Elapsed<small>/ms<small></th>
			</tr><%

		for(final I item : items)
		{
			final String id = cop.getID(item);
			final Info info = store.get(id);
			final String rowClass = info!=null ? info.getRowClass() : null;
			%>
			<tr id="<%=id%>"<% if(rowClass!=null){%> class="<%=rowClass%>"<%} %>><%
				writeRow(out, cop, headingsLength, item, id, info);
			%>
			</tr><%
		}
		%>
		</table><%
	}

	static <I> void writeRow(
			final Out out,
			final TestCop<I> cop,
			final int headingsLength,
			final I item,
			final String id,
			final Info info)
	{
			for(int h = 0; h<headingsLength; h++)
			{
				%>
				<td class="text"><% cop.writeValue(out, item, h); %></td><%
			}

				%>
				<td><a href="#" onclick="return doTest('<%=cop.toTest(id, false)%>', this);">Test</a></td><%

			if(info!=null)
			{
				%>
				<td><%=info.getDate()%></td><%

				final String cellClass = info.getCellClass();
				%>
				<td<% if(cellClass!=null){%> class="<%=cellClass%>"<%} %>><%
				writeError(out, info.isError());
				%><% info.writeCellContent(out); %><%
				%></td>
				<td><%=format(info.elapsed)%></td><%
			}
			else
			{
				%>
				<td class="notavailable" colspan="3">not yet tested</td><%
			}
	}

	static <I> void writeSummary(
			final Out out,
			final TestCop<I> cop,
			final int headingsLength,
			final String firstId,
			final Store.Summary summary,
			final String cellClass)
	{
				%>
				<th style="text-align:right;" colspan="<%=headingsLength%>">Summary</th>
				<td><a href="#" onclick="return doTest('<%=cop.toTest(firstId, true)%>', this);">Test</a></td>
				<td><% writeUnknown(out, !summary.complete); %><%=summary.date()%></td>
				<td<% if(cellClass!=null){%> class="<%=cellClass%>"<%} %>><%
				writeError(out, summary.isError);
				%><%=summary.failures%><%
				%></td>
				<td><%=format(summary.elapsed)%></td><%
	}

	private Test_Jspm()
	{
		// prevent instantiation
	}
}%>